"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const SkillAttributeAssets_1 = __importDefault(require("../../assets/SkillAttributeAssets"));
const TextAssets_1 = __importDefault(require("../../assets/TextAssets"));
const UpgradeCost_1 = __importDefault(require("../../material/UpgradeCost"));
const Skill_1 = __importDefault(require("./Skill"));
const ts_utils_1 = require("../../../utils/ts_utils");
/**
 * @en CombatSkill
 * @extends {Skill}
 */
class UpgradableSkill extends Skill_1.default {
    /**
     * @param data
     * @param enka
     */
    constructor(data, enka) {
        super(data, enka);
    }
    /**
     * @param level
     */
    getSkillAttributes(level) {
        var _a;
        const proudSkillGroupId = new config_file_js_1.JsonReader(this._data).getAsNumber("proudSkillGroupId");
        if (!proudSkillGroupId)
            return [];
        const leveledSkillData = (_a = this.enka.cachedAssetsManager.getGenshinCacheData("ProudSkillExcelConfigData").findArray((_, p) => p.getAsNumber("proudSkillGroupId") === proudSkillGroupId && p.getAsNumber("level") === level)) === null || _a === void 0 ? void 0 : _a[1];
        if (!leveledSkillData)
            return [];
        const paramDescList = leveledSkillData.has("paramDescList") ? leveledSkillData.get("paramDescList").mapArray((_, p) => p.getAsNumber()) : undefined;
        if (!paramDescList)
            return [];
        return paramDescList.map(id => {
            // TODO: better filter
            try {
                new TextAssets_1.default(id, this.enka).get("en");
            }
            catch (e) {
                return null;
            }
            return new SkillAttributeAssets_1.default(id, leveledSkillData.has("paramList") ? leveledSkillData.get("paramList").mapArray((_, p) => p.getAsNumber()) : [], this.enka);
        }).filter(ts_utils_1.nonNullable);
    }
    /**
     * @param level the base level you want to upgrade to. (Do not add extra levels.)
     */
    getUpgradeCost(level) {
        var _a;
        const proudSkillGroupId = new config_file_js_1.JsonReader(this._data).getAsNumber("proudSkillGroupId");
        if (!proudSkillGroupId)
            return null;
        const leveledSkillData = (_a = this.enka.cachedAssetsManager.getGenshinCacheData("ProudSkillExcelConfigData").findArray((_, p) => p.getAsNumber("proudSkillGroupId") === proudSkillGroupId && p.getAsNumber("level") === level)) === null || _a === void 0 ? void 0 : _a[1];
        if (!leveledSkillData)
            return null;
        return new UpgradeCost_1.default(leveledSkillData.getAsNumberWithDefault(0, "coinCost"), leveledSkillData.has("costItems") ? leveledSkillData.get("costItems").mapArray((_, p) => p.getAsJsonObject()) : [], this.enka);
    }
    /**
     * @param id
     * @param enka
     */
    static getById(id, enka) {
        return new UpgradableSkill(this._getJsonObjectById(id, enka), enka);
    }
}
exports.default = UpgradableSkill;
