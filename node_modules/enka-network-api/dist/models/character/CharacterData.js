"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ImageAssets_1 = __importDefault(require("../assets/ImageAssets"));
const TextAssets_1 = __importDefault(require("../assets/TextAssets"));
const Skill_1 = __importDefault(require("./talents/Skill"));
const AssetsNotFoundError_1 = __importDefault(require("../../errors/AssetsNotFoundError"));
const Constellation_1 = __importDefault(require("./Constellation"));
const ElementalBurst_1 = __importDefault(require("./talents/ElementalBurst"));
const Costume_1 = __importDefault(require("./Costume"));
const PassiveTalent_1 = __importDefault(require("./talents/PassiveTalent"));
const ElementalSkill_1 = __importDefault(require("./talents/ElementalSkill"));
const NormalAttack_1 = __importDefault(require("./talents/NormalAttack"));
const Material_1 = __importDefault(require("../material/Material"));
const CharacterDetails_1 = __importDefault(require("./CharacterDetails"));
const CharacterAscension_1 = __importDefault(require("./CharacterAscension"));
const config_file_js_1 = require("config_file.js");
const StatProperty_1 = __importDefault(require("../StatProperty"));
const ts_utils_1 = require("../../utils/ts_utils");
/**
 * @en CharacterData
 */
class CharacterData {
    /**
     * @param data
     * @param enka
     * @param candSkillDepotId
     */
    constructor(data, enka, candSkillDepotId) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this._data = data;
        this.enka = enka;
        const json = new config_file_js_1.JsonReader(this._data);
        this.id = json.getAsNumber("id");
        this.name = new TextAssets_1.default(json.getAsNumber("nameTextMapHash"), enka);
        this.description = new TextAssets_1.default(json.getAsNumber("descTextMapHash"), enka);
        this.bodyType = json.getAsString("bodyType");
        this.weaponType = json.getAsString("weaponType");
        this.gender = this.bodyType === "BODY_MALE" || this.bodyType === "BODY_BOY" ? "MALE" : "FEMALE";
        this._nameId = json.getAsString("iconName").slice("UI_AvatarIcon_".length);
        this.icon = new ImageAssets_1.default(json.getAsString("iconName"), enka);
        this.sideIcon = new ImageAssets_1.default(json.getAsString("sideIconName"), enka);
        this.splashImage = new ImageAssets_1.default(`UI_Gacha_AvatarImg_${this._nameId}`, enka);
        this.gachaSlice = new ImageAssets_1.default(`UI_Gacha_AvatarIcon_${this._nameId}`, enka);
        this.cardIcon = new ImageAssets_1.default(`UI_AvatarIcon_${this._nameId}_Card`, enka);
        const friendshipRewardId = (_a = enka.cachedAssetsManager.getGenshinCacheData("FetterCharacterCardExcelConfigData").findArray((_, value) => value.getAsNumber("avatarId") === this.id)) === null || _a === void 0 ? void 0 : _a[1].getAsNumber("rewardId");
        const nameCardId = friendshipRewardId ? (_b = enka.cachedAssetsManager.getGenshinCacheData("RewardExcelConfigData").findArray((_, reward) => reward.getAsNumber("rewardId") === friendshipRewardId)) === null || _b === void 0 ? void 0 : _b[1].getAsNumber("rewardItemList", 0, "itemId") : undefined;
        this.nameCard = nameCardId ? Material_1.default.getMaterialById(nameCardId, enka) : null;
        this.rarity = json.getAsString("qualityType");
        this.stars = this.rarity.startsWith("QUALITY_ORANGE") ? 5 : 4;
        const costumeData = enka.cachedAssetsManager.getGenshinCacheData("AvatarCostumeExcelConfigData").filterArray((_, p) => p.getAsNumber("characterId") === this.id); // Previous key of "jsonName"
        this._costumeData = costumeData.map(([, p]) => p.getAsJsonObject());
        this.costumes = this._costumeData.map(c => new Costume_1.default(c, enka));
        this.skillDepotId = candSkillDepotId !== null && candSkillDepotId !== void 0 ? candSkillDepotId : json.getAsNumber("skillDepotId");
        const skillData = (_c = enka.cachedAssetsManager.getGenshinCacheData("AvatarSkillDepotExcelConfigData").findArray((_, p) => p.getAsNumber("id") === this.skillDepotId)) === null || _c === void 0 ? void 0 : _c[1];
        if (!skillData)
            throw new AssetsNotFoundError_1.default("Skill Depot", this.skillDepotId);
        this._skillData = skillData.getAsJsonObject();
        this.arkhe = skillData.getAsStringWithDefault(null, enka.cachedAssetsManager.getObjectKeysManager().characterArkheKey);
        // if the character is "Traveler" and no skillDepotId (which indicates its element type) provided,
        // `elementalBurst`, `elementalSkill`, and `element` cannot be retrieved.
        const hasElement = skillData.has("energySkill");
        this.elementalBurst = hasElement ? ElementalBurst_1.default.getById(skillData.getAsNumber("energySkill"), enka) : null;
        this.element = (_e = (_d = this.elementalBurst) === null || _d === void 0 ? void 0 : _d.costElemType) !== null && _e !== void 0 ? _e : null;
        const _skills = skillData.get("skills").mapArray((_, p) => p.getAsNumber()).map((skillId, index) => {
            if (!skillId)
                return null;
            if (index === 0)
                return NormalAttack_1.default.getById(skillId, enka);
            if (index === 1)
                return ElementalSkill_1.default.getById(skillId, enka);
            return Skill_1.default.getById(skillId, enka);
        }).filter(ts_utils_1.nonNullable);
        if (this.elementalBurst)
            _skills.push(this.elementalBurst);
        this.skills = _skills;
        this.elementalSkill = (_f = _skills.find(s => s instanceof ElementalSkill_1.default)) !== null && _f !== void 0 ? _f : null;
        this.normalAttack = _skills.find(s => s instanceof NormalAttack_1.default);
        this.passiveTalents = skillData.get("inherentProudSkillOpens").filterArray((_, p) => p.has("proudSkillGroupId")).map(([, p]) => PassiveTalent_1.default.getById(p.getAsNumber("proudSkillGroupId") * 100 + 1, enka)); // Number(`${p.proudSkillGroupId}01`)
        this.constellations = skillData.get("talents").mapArray((_, p) => p.getAsNumber()).filter(cId => cId !== 0).map(cId => Constellation_1.default.getById(cId, enka));
        const releaseData = (_g = enka.cachedAssetsManager.getGenshinCacheData("AvatarCodexExcelConfigData").findArray((_, p) => p.getAsNumber("avatarId") === this.id)) === null || _g === void 0 ? void 0 : _g[1];
        this._releaseData = (_h = releaseData === null || releaseData === void 0 ? void 0 : releaseData.getAsJsonObject()) !== null && _h !== void 0 ? _h : null;
        this.releasedAt = releaseData ? new Date(`${releaseData.getAsString("beginTime")}+8:00`) : null;
        const archonsIds = enka.cachedAssetsManager.getGenshinCacheData("TrialAvatarFetterDataConfigData").mapArray((_, p) => p.getAsNumber("avatarId"));
        this.isArchon = archonsIds.includes(this.id);
        // should always 10000005 and 10000007
        const travelerIds = enka.cachedAssetsManager.getGenshinCacheData("AvatarHeroEntityExcelConfigData").mapArray((_, p) => p.getAsNumber("avatarId"));
        this.isTraveler = travelerIds.includes(this.id);
        let details;
        try {
            details = CharacterDetails_1.default.getByCharacterId(this.id, this.isArchon, this.enka);
        }
        catch (e) {
            details = null;
        }
        this.details = details;
    }
    /**
     * @returns character's original name (Travelers -> Aether, Lumine)
     */
    getOriginalName() {
        switch (this.id) {
            case 10000005:
                return new TextAssets_1.default(2329553598, this.enka);
            case 10000007:
                return new TextAssets_1.default(3241049361, this.enka);
            default:
                return this.name;
        }
    }
    /**
     * @param ascension ascension level between 0 and 6
     */
    getAscensionData(ascension) {
        return CharacterAscension_1.default.getById(new config_file_js_1.JsonReader(this._data).getAsNumber("avatarPromoteId"), ascension, this.enka);
    }
    /**
     * @param ascension ascension level between 0 and 6
     * @param level character level between 1 and 90
     */
    getStats(ascension, level) {
        if (ascension < 0 || 6 < ascension)
            throw new Error("Ascension levels must be between 0 and 6.");
        if (level < 1 || 90 < level)
            throw new Error("Character levels must be between 1 and 90.");
        const curve = this.enka.cachedAssetsManager.getGenshinCacheData("AvatarCurveExcelConfigData").get(level - 1, "curveInfos");
        const ascensionData = this.getAscensionData(ascension);
        const characterJson = new config_file_js_1.JsonReader(this._data);
        const baseValues = {
            "FIGHT_PROP_BASE_HP": characterJson.getAsNumber("hpBase"),
            "FIGHT_PROP_BASE_ATTACK": characterJson.getAsNumber("attackBase"),
            "FIGHT_PROP_BASE_DEFENSE": characterJson.getAsNumber("defenseBase"),
            "FIGHT_PROP_CRITICAL": characterJson.getAsNumber("critical"),
            "FIGHT_PROP_CRITICAL_HURT": characterJson.getAsNumber("criticalHurt"),
        };
        const curves = characterJson.get("propGrowCurves");
        const statPropertiesWithBaseValues = Object.entries(baseValues).map(([fightProp, baseValue]) => {
            var _a, _b, _c, _d;
            const curveData = (_a = curves.findArray((_, c) => c.getAsString("type") === fightProp)) === null || _a === void 0 ? void 0 : _a[1];
            const curveType = curveData === null || curveData === void 0 ? void 0 : curveData.getAsString("growCurve");
            const targetCurve = curveType ? (_b = curve.findArray((_, c) => c.getAsString("type") === curveType)) === null || _b === void 0 ? void 0 : _b[1] : null;
            const ascensionValue = (_d = (_c = ascensionData.addProps.find(p => p.fightProp === fightProp)) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 0;
            const value = baseValue * (targetCurve ? targetCurve.getAsNumber("value") : 1) + ascensionValue;
            return new StatProperty_1.default(fightProp, value, this.enka);
        });
        const statPropertiesWithoutBaseValues = ascensionData.addProps.filter(p => !baseValues[p.fightProp]);
        const levelingProps = [...statPropertiesWithBaseValues, ...statPropertiesWithoutBaseValues];
        const talents = this.passiveTalents.filter(t => t.requiredAscension <= ascension && t.addProps.length > 0);
        return StatProperty_1.default.sumStatProperties([...levelingProps, ...talents.flatMap(t => t.addProps)], this.enka);
    }
    /**
     * @param id
     * @param enka
     * @param candSkillDepotId
     */
    static getById(id, enka, candSkillDepotId) {
        var _a;
        const json = (_a = enka.cachedAssetsManager.getGenshinCacheData("AvatarExcelConfigData").findArray((_, p) => p.getAsNumber("id") === id)) === null || _a === void 0 ? void 0 : _a[1];
        if (!json)
            throw new AssetsNotFoundError_1.default("Character", id);
        return new CharacterData(json.getAsJsonObject(), enka, candSkillDepotId);
    }
}
exports.default = CharacterData;
