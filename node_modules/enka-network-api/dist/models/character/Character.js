"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Artifact_1 = __importDefault(require("../artifact/Artifact"));
const CharacterData_1 = __importDefault(require("./CharacterData"));
const Weapon_1 = __importDefault(require("../weapon/Weapon"));
const CharacterStats_1 = __importDefault(require("./CharacterStats"));
const SkillLevel_1 = __importDefault(require("./talents/SkillLevel"));
const UpgradableSkill_1 = __importDefault(require("./talents/UpgradableSkill"));
const NormalAttack_1 = __importDefault(require("./talents/NormalAttack"));
const ElementalSkill_1 = __importDefault(require("./talents/ElementalSkill"));
const ElementalBurst_1 = __importDefault(require("./talents/ElementalBurst"));
const config_file_js_1 = require("config_file.js");
const ts_utils_1 = require("../../utils/ts_utils");
const IGOODResolvable_1 = require("../good/IGOODResolvable");
/**
 * @en Character
 */
class Character {
    /**
     * @param data
     * @param enka
     */
    constructor(data, enka) {
        var _a;
        this.enka = enka;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.characterData = CharacterData_1.default.getById(json.getAsNumber("avatarId"), enka, json.getAsNumberWithDefault(undefined, "skillDepotId"));
        this.costume = (json.has("costumeId") ? this.characterData.costumes.find(c => c.id === json.getAsNumber("costumeId")) : this.characterData.costumes.find(c => c.isDefault));
        this.artifacts = json.get("equipList").filterArray((_, item) => item.has("reliquary")).map(([, artifact]) => new Artifact_1.default(artifact.getAsJsonObject(), enka));
        this.artifacts.forEach(a => a.location = (0, IGOODResolvable_1.convertToGOODKey)(this.characterData.name.get("en")));
        this.weapon = new Weapon_1.default((_a = json.get("equipList").findArray((_, item) => item.has("weapon"))) === null || _a === void 0 ? void 0 : _a[1].getAsJsonObject(), enka);
        this.weapon.location = (0, IGOODResolvable_1.convertToGOODKey)(this.characterData.name.get("en"));
        this.stats = new CharacterStats_1.default(json.getAsJsonObject("fightPropMap"), enka, this.characterData.element);
        const propMap = json.get("propMap");
        this.level = Number(propMap.getAsStringWithDefault(0, "4001", "val"));
        this.xp = Number(propMap.getAsStringWithDefault(0, "1001", "val"));
        this.ascension = Number(propMap.getAsStringWithDefault(0, "1002", "val"));
        this.maxLevel = (this.ascension + 1) * 20 - (this.ascension > 1 ? (this.ascension - 1) * 10 : 0);
        this.stamina = Number(propMap.getAsStringWithDefault(10000, "10010", "val")) / 100;
        this.friendship = json.getAsNumberWithDefault(1, "fetterInfo", "expLevel");
        this.unlockedConstellations = this.characterData.constellations.filter(c => (json.has("talentIdList") ? json.get("talentIdList").mapArray((_, p) => p.getAsNumber()) : []).includes(c.id));
        this.skillLevels = json.get("skillLevelMap").mapObject((key, value) => {
            const skill = this.characterData.skills.find(s => s.id.toString() === key);
            if (!skill || !(skill instanceof UpgradableSkill_1.default))
                return null;
            const base = value.getAsNumber();
            const proudSkillExtraLevelMap = json.get("proudSkillExtraLevelMap");
            const proudSkillGroupId = new config_file_js_1.JsonReader(skill._data).getAsNumber("proudSkillGroupId").toString();
            const extra = proudSkillExtraLevelMap.getAsNumberWithDefault(0, proudSkillGroupId);
            return {
                skill,
                level: new SkillLevel_1.default(base, extra),
            };
        }).filter(ts_utils_1.nonNullable).sort((a, b) => {
            const getScore = (skill) => (skill instanceof NormalAttack_1.default) ? 0 : (skill instanceof ElementalSkill_1.default) ? 1 : (skill instanceof ElementalBurst_1.default) ? 2 : 3;
            return getScore(a.skill) - getScore(b.skill);
        });
        this.unlockedPassiveTalents = this.characterData.passiveTalents.filter(p => (json.has("inherentProudSkillList") ? json.get("inherentProudSkillList").mapArray((_, e) => e.getAsNumber()) : []).includes(p.id));
    }
    toGOOD() {
        var _a, _b, _c, _d, _e, _f;
        return {
            key: (0, IGOODResolvable_1.convertToGOODKey)(this.characterData.name.get("en")),
            level: this.level,
            constellation: this.unlockedConstellations.length,
            ascension: this.ascension,
            talent: {
                auto: (_b = (_a = this.skillLevels.find(s => s.skill instanceof NormalAttack_1.default)) === null || _a === void 0 ? void 0 : _a.level.base) !== null && _b !== void 0 ? _b : 1,
                skill: (_d = (_c = this.skillLevels.find(s => s.skill instanceof ElementalSkill_1.default)) === null || _c === void 0 ? void 0 : _c.level.base) !== null && _d !== void 0 ? _d : 1,
                burst: (_f = (_e = this.skillLevels.find(s => s.skill instanceof ElementalBurst_1.default)) === null || _e === void 0 ? void 0 : _e.level.base) !== null && _f !== void 0 ? _f : 1,
            },
        };
    }
}
exports.default = Character;
