"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AssetsNotFoundError_1 = __importDefault(require("../../errors/AssetsNotFoundError"));
const ImageAssets_1 = __importDefault(require("../assets/ImageAssets"));
const TextAssets_1 = __importDefault(require("../assets/TextAssets"));
const ArtifactSetBonus_1 = __importDefault(require("./ArtifactSetBonus"));
const config_file_js_1 = require("config_file.js");
const ArtifactData_1 = __importDefault(require("./ArtifactData"));
/**
 * @en ArtifactSet
 */
class ArtifactSet {
    /**
     * @param data
     * @param enka
     */
    constructor(data, enka) {
        this.enka = enka;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.id = json.getAsNumber("setId");
        const setNeedNum = json.get("setNeedNum").mapArray((_, p) => p.getAsNumber());
        const setBonusJsonList = enka.cachedAssetsManager.getGenshinCacheData("EquipAffixExcelConfigData").filterArray((_, bonus) => bonus.getAsNumber("id") === json.getAsNumber("EquipAffixId"));
        if (setBonusJsonList.length === 0)
            throw new AssetsNotFoundError_1.default("Artifact Set Bonus", `${this.id}-${json.getAsNumber("EquipAffixId")}`);
        if (setBonusJsonList.length !== setNeedNum.length)
            throw new Error(`Missing some set bonus for this artifact set (ID: ${this.id})`);
        this._setBonusData = setBonusJsonList.map(bonus => bonus[1].getAsJsonObject());
        this.setBonus = setNeedNum.map((n, i) => new ArtifactSetBonus_1.default(n, this._setBonusData[i], enka));
        this.icon = new ImageAssets_1.default(json.getAsString("setIcon"), enka);
        this.name = new TextAssets_1.default(new config_file_js_1.JsonReader(this._setBonusData[0]).getAsNumber("nameTextMapHash"), enka);
    }
    static getById(id, enka) {
        var _a;
        const json = (_a = enka.cachedAssetsManager.getGenshinCacheData("ReliquarySetExcelConfigData").findArray((_, p) => p.getAsNumber("setId") === id)) === null || _a === void 0 ? void 0 : _a[1];
        if (!json)
            throw new AssetsNotFoundError_1.default("ArtifactSet", id);
        return new ArtifactSet(json.getAsJsonObject(), enka);
    }
    /**
     * @param artifacts
     */
    static getActiveSetBonus(artifacts) {
        const artifactSets = artifacts.map(a => (a instanceof ArtifactSet) ? a : (a instanceof ArtifactData_1.default) ? a.set : a.artifactData.set);
        const separated = (0, config_file_js_1.separateByValue)(artifactSets, a => a.id.toString());
        const artifactSetCounts = Object.values(separated).map(array => { return { count: array.length, set: array[0] }; });
        return artifactSetCounts.map(obj => {
            return {
                set: obj.set,
                count: obj.count,
                activeBonus: obj.set.setBonus.filter(bonus => bonus.needCount <= obj.count),
            };
        }).sort((a, b) => b.count - a.count);
    }
}
exports.default = ArtifactSet;
