"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = __importDefault(require("../../errors/AssetsNotFoundError"));
const ImageAssets_1 = __importDefault(require("../assets/ImageAssets"));
const TextAssets_1 = __importDefault(require("../assets/TextAssets"));
const ArtifactSet_1 = __importDefault(require("./ArtifactSet"));
/**
 * @en ArtifactData
 */
class ArtifactData {
    /**
     * @param data
     * @param enka
     * @param setData
     */
    constructor(data, enka, setData) {
        var _a;
        this.enka = enka;
        this._data = data;
        const json = new config_file_js_1.JsonReader(this._data);
        this.id = json.getAsNumber("id");
        this.name = new TextAssets_1.default(json.getAsNumber("nameTextMapHash"), enka);
        this.description = new TextAssets_1.default(json.getAsNumber("descTextMapHash"), enka);
        this.equipType = json.getAsString("equipType");
        const equipTypeJson = (_a = enka.cachedAssetsManager.getGenshinCacheData("ManualTextMapConfigData").findArray((_, p) => p.getAsString("textMapId") === this.equipType)) === null || _a === void 0 ? void 0 : _a[1];
        if (!equipTypeJson)
            throw new AssetsNotFoundError_1.default("Artifact Equip Type", this.equipType);
        this._equipTypeData = equipTypeJson.getAsJsonObject();
        this.equipTypeName = new TextAssets_1.default(equipTypeJson.getAsNumber("textMapContentTextMapHash"), enka);
        this.icon = new ImageAssets_1.default(json.getAsString("icon"), enka);
        this.stars = json.getAsNumber("rankLevel");
        this.set = setData ? new ArtifactSet_1.default(setData, enka) : ArtifactSet_1.default.getById(json.getAsNumber("setId"), enka);
    }
    /**
     * @param id
     * @param enka
     * @param setData
     */
    static getById(id, enka, setData) {
        var _a;
        const json = (_a = enka.cachedAssetsManager.getGenshinCacheData("ReliquaryExcelConfigData").findArray((_, p) => p.getAsNumber("id") === id)) === null || _a === void 0 ? void 0 : _a[1];
        if (!json)
            throw new AssetsNotFoundError_1.default("Artifact", id);
        return new ArtifactData(json.getAsJsonObject(), enka, setData);
    }
}
exports.default = ArtifactData;
