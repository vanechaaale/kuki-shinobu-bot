"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultEnkaClientOptions = void 0;
const GenshinUser_1 = __importDefault(require("../models/GenshinUser"));
const characterUtils = __importStar(require("../utils/character_utils"));
const CachedAssetsManager_1 = __importDefault(require("./CachedAssetsManager"));
const CharacterData_1 = __importDefault(require("../models/character/CharacterData"));
const WeaponData_1 = __importDefault(require("../models/weapon/WeaponData"));
const Costume_1 = __importDefault(require("../models/character/Costume"));
const axios_utils_1 = require("../utils/axios_utils");
const Material_1 = require("../models/material/Material");
const ArtifactData_1 = __importDefault(require("../models/artifact/ArtifactData"));
const constants_1 = require("../utils/constants");
const DetailedGenshinUser_1 = __importDefault(require("../models/DetailedGenshinUser"));
const enka_system_1 = require("enka-system");
const GenshinCharacterBuild_1 = __importDefault(require("../models/enka/GenshinCharacterBuild"));
const Material_2 = __importDefault(require("../models/material/Material"));
const ArtifactSet_1 = __importDefault(require("../models/artifact/ArtifactSet"));
const config_file_js_1 = require("config_file.js");
const getUserUrl = (enkaUrl, uid) => `${enkaUrl}/api/uid/${uid}`;
const userCacheMap = new Map();
/** @constant */
exports.defaultEnkaClientOptions = {
    "enkaUrl": "https://enka.network",
    "defaultImageBaseUrl": "https://api.ambr.top/assets/UI",
    "imageBaseUrlByRegex": {
        "https://enka.network/ui": [
            /^UI_(Costume|NameCardIcon|NameCardPic|RelicIcon|AvatarIcon_Side|EquipIcon)_/,
            /^UI_AvatarIcon_(.+)_(Card|Circle)$/,
        ],
        "https://res.cloudinary.com/genshin/image/upload/sprites": [/^Eff_UI_Talent_/],
    },
    "userAgent": "Mozilla/5.0",
    "requestTimeout": 3000,
    "defaultLanguage": "en",
    "textAssetsDynamicData": {
        paramList: [],
        userInfo: null,
    },
    "cacheDirectory": null,
    "showFetchCacheLog": true,
    "userCache": {
        isEnabled: true,
        getter: null,
        setter: null,
        deleter: null,
    },
    "githubToken": null,
    "enkaSystem": null,
};
/**
 * @en EnkaClient
 */
class EnkaClient {
    getUser(data) {
        const fixedData = (0, config_file_js_1.renameKeys)(data, { "player_info": "playerInfo" });
        return new GenshinUser_1.default(fixedData, this);
    }
    getCharacterBuild(data, username, hash) {
        return new GenshinCharacterBuild_1.default(data, this, username, hash);
    }
    /** @param options Options for the client */
    constructor(options = {}) {
        this.hoyoType = 0;
        const mergedOptions = (0, config_file_js_1.bindOptions)(exports.defaultEnkaClientOptions, options);
        if (!mergedOptions.enkaSystem) {
            if (enka_system_1.EnkaSystem.instance.getLibrary(this.hoyoType)) {
                mergedOptions.enkaSystem = new enka_system_1.EnkaSystem();
            }
            else {
                mergedOptions.enkaSystem = enka_system_1.EnkaSystem.instance;
            }
        }
        this.options = mergedOptions;
        const userCacheFuncs = [this.options.userCache.getter, this.options.userCache.setter, this.options.userCache.deleter];
        if (userCacheFuncs.some(f => f) && userCacheFuncs.some(f => !f))
            throw new Error("All user cache functions (setter/getter/deleter) must be null or all must be customized.");
        this.cachedAssetsManager = new CachedAssetsManager_1.default(this);
        this._tasks = [];
        this.options.enkaSystem.registerLibrary(this);
    }
    /**
     * @param uid In-game UID of the user
     * @param collapse Whether to fetch rough user information (Very fast)
     * @returns DetailedGenshinUser if collapse is false, GenshinUser if collapse is true
     * @throws {EnkaNetworkError}
     */
    async fetchUser(uid, collapse = false) {
        var _a, _b, _c, _d;
        if (isNaN(Number(uid)))
            throw new Error("Parameter `uid` must be a number or a string number.");
        const cacheGetter = (_a = this.options.userCache.getter) !== null && _a !== void 0 ? _a : (async (key) => userCacheMap.get(key));
        const cacheSetter = (_b = this.options.userCache.setter) !== null && _b !== void 0 ? _b : (async (key, data) => { userCacheMap.set(key, data); });
        const cacheDeleter = (_c = this.options.userCache.deleter) !== null && _c !== void 0 ? _c : (async (key) => { userCacheMap.delete(key); });
        const cacheKey = `${uid}${collapse ? "-info" : ""}`;
        const cachedUserData = (_d = (collapse ? await cacheGetter(cacheKey) : null)) !== null && _d !== void 0 ? _d : await cacheGetter(uid.toString());
        const useCache = !!(cachedUserData && this.options.userCache.isEnabled);
        let data;
        if (!useCache) {
            const url = getUserUrl(this.options.enkaUrl, uid) + (collapse ? "?info" : "");
            const response = await (0, axios_utils_1.fetchJSON)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 400:
                        throw new enka_system_1.InvalidUidFormatError(Number(uid), response.status, response.statusText);
                    case 424:
                        throw new enka_system_1.EnkaNetworkError("Request to enka.network failed because it is under maintenance.", response.status, response.statusText);
                    case 429:
                        throw new enka_system_1.EnkaNetworkError("Rate Limit reached. You reached enka.network's rate limit. Please try again in a few minutes.", response.status, response.statusText);
                    case 404:
                        throw new enka_system_1.UserNotFoundError(`User with uid ${uid} was not found. Please check whether the uid is correct. If you find the uid is correct, it may be a internal server error.`, response.status, response.statusText);
                    default:
                        throw new enka_system_1.EnkaNetworkError(`Request to enka.network failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            // TODO: use structuredClone
            data = Object.assign({}, response.data);
            if (this.options.userCache.isEnabled) {
                const lifetime = data.ttl * 1000;
                const now = Date.now();
                data._lib = { cache_id: (0, config_file_js_1.generateUuid)(), created_at: now, expires_at: now + lifetime, original_ttl: data.ttl };
                const task = setTimeout(async () => {
                    const dataToDelete = await cacheGetter(cacheKey);
                    if (!dataToDelete)
                        return;
                    if (dataToDelete._lib.cache_id === data._lib.cache_id) {
                        await cacheDeleter(cacheKey);
                    }
                    this._tasks.splice(this._tasks.indexOf(task), 1);
                }, lifetime);
                this._tasks.push(task);
                if (!collapse)
                    await cacheDeleter(`${uid}-info`);
                await cacheSetter(cacheKey, data);
            }
        }
        else {
            // TODO: use structuredClone
            data = Object.assign({}, cachedUserData);
            if (collapse)
                delete data["avatarInfoList"];
            data.ttl = Math.ceil((data._lib.expires_at - Date.now()) / 1000);
        }
        // console.log("useCache", useCache);
        const userData = (0, config_file_js_1.bindOptions)(data, { _lib: { is_cache: useCache } });
        return collapse ? new GenshinUser_1.default(userData, this) : new DetailedGenshinUser_1.default(userData, this);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the genshin accounts added to the Enka.Network account
     */
    async fetchEnkaGenshinAccounts(username) {
        return await this.options.enkaSystem.fetchEnkaGameAccounts(username, [0]);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the genshin account with provided hash
     */
    async fetchEnkaGenshinAccount(username, hash) {
        return await this.options.enkaSystem.fetchEnkaGameAccount(username, hash);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash EnkaGameAccount hash
     * @returns the genshin character builds including saved builds in Enka.Network account
     */
    async fetchEnkaGenshinBuilds(username, hash) {
        return await this.options.enkaSystem.fetchEnkaCharacterBuilds(username, hash);
    }
    /**
     * @returns all playable character data
     */
    getAllCharacters() {
        return this.cachedAssetsManager.getGenshinCacheData("AvatarExcelConfigData").filterArray((_, p) => p.getAsStringWithDefault(null, "useType") === "AVATAR_FORMAL").map(([, p]) => characterUtils.getCharactersById(p.getAsNumber("id"), this)).reduce((a, b) => [...a, ...b], []);
    }
    /**
     * @param id The id of the character
     * @param skillDepotId Specifies one or zero elements for Traveler
     */
    getCharacterById(id, skillDepotId) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return CharacterData_1.default.getById(Number(id), this, skillDepotId ? Number(skillDepotId) : undefined);
    }
    /**
     * @param excludeInvalidWeapons
     * @returns all weapon data
     */
    getAllWeapons(excludeInvalidWeapons = true) {
        const weapons = this.cachedAssetsManager.getGenshinCacheData("WeaponExcelConfigData");
        if (excludeInvalidWeapons) {
            return weapons.filterArray((_, p) => p.has("id") && p.has("weaponPromoteId") && p.getAsNumber("weaponPromoteId") === p.getAsNumber("id")).map(([, p]) => new WeaponData_1.default(p.getAsJsonObject(), this));
        }
        else {
            return weapons.mapArray((_, p) => new WeaponData_1.default(p.getAsJsonObject(), this));
        }
    }
    /**
     * @param id The id of the weapon
     */
    getWeaponById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return WeaponData_1.default.getById(Number(id), this);
    }
    /**
     * @param includeDefaults Whether to include default costumes
     * @returns all costume data
     */
    getAllCostumes(includeDefaults = false) {
        return this.cachedAssetsManager.getGenshinCacheData("AvatarCostumeExcelConfigData").filterArray((_, p) => !includeDefaults || (includeDefaults && p.getAsBooleanWithDefault(false, "isDefault"))).map(([, p]) => new Costume_1.default(p.getAsJsonObject(), this));
    }
    /**
     * @param id The id of the costume
     */
    getCostumeById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return Costume_1.default.getById(Number(id), this);
    }
    /**
     * @returns all material data
     */
    getAllMaterials() {
        return this.cachedAssetsManager.getGenshinCacheData("MaterialExcelConfigData").mapArray((_, p) => Material_2.default.getMaterialByData(p.getAsJsonObject(), this));
    }
    /**
     * @param id The id of the material
     */
    getMaterialById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return Material_2.default.getMaterialById(Number(id), this);
    }
    /**
     * @returns all name card data
     */
    getAllNameCards() {
        return this.cachedAssetsManager.getGenshinCacheData("MaterialExcelConfigData").filterArray((_, p) => p.has("materialType") && p.getAsString("materialType") === Material_1.NameCard.MATERIAL_TYPE).map(([, p]) => new Material_1.NameCard(p.getAsJsonObject(), this));
    }
    /**
     * @param id The id of the name card
     */
    getNameCardById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        const material = Material_2.default.getMaterialById(Number(id), this);
        if (material.materialType !== Material_1.NameCard.MATERIAL_TYPE)
            throw new Error(`Material ${material.id} is not a NameCard.`);
        return material;
    }
    /**
     * @param highestRarityOnly Whether to return only the rarest of artifacts of the same type
     * @returns all artifact data
     */
    getAllArtifacts(highestRarityOnly = false) {
        const excludeSetIds = this.cachedAssetsManager.getGenshinCacheData("ReliquarySetExcelConfigData").filterArray((_, p) => p.getValue("DisableFilter") === 1).map(([, p]) => p.getAsNumber("setId"));
        // including artifacts with invalid rarity
        const artifacts = this.cachedAssetsManager.getGenshinCacheData("ReliquaryExcelConfigData").filterArray((_, p) => p.has("setId") && !excludeSetIds.includes(p.getAsNumber("setId")));
        const validRarityArtifacts = artifacts.filter(([, p]) => {
            const setId = p.getAsNumber("setId");
            const allowedRarityRange = setId in constants_1.artifactRarityRangeMap ? constants_1.artifactRarityRangeMap[setId.toString()] : [4, 5];
            const min = highestRarityOnly ? allowedRarityRange[1] : allowedRarityRange[0];
            const max = allowedRarityRange[1];
            const stars = p.getAsNumber("rankLevel");
            return (min <= stars && stars <= max);
        });
        const chunked = (0, config_file_js_1.separateByValue)(validRarityArtifacts, ([, p]) => `${p.getAsNumber("setId")}-${p.getAsString("equipType")}-${p.getAsNumber("rankLevel")}`);
        return Object.values(chunked).map(chunk => new ArtifactData_1.default(chunk[chunk.length - 1][1].getAsJsonObject(), this));
    }
    /**
     * @param id The id of the artifact
     */
    getArtifactById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return ArtifactData_1.default.getById(Number(id), this);
    }
    /**
     * @returns all artifact set data
     */
    getAllArtifactSets() {
        const sets = this.cachedAssetsManager.getGenshinCacheData("ReliquarySetExcelConfigData").filterArray((_, p) => p.getValue("DisableFilter") !== 1);
        return sets.map(([, p]) => new ArtifactSet_1.default(p.getAsJsonObject(), this));
    }
    /**
     * @param id The id of artifact set
     */
    getArtifactSetById(id) {
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        return ArtifactSet_1.default.getById(Number(id), this);
    }
    /**
     * Clear all running tasks in the client.
     */
    close() {
        this._tasks.forEach(task => clearTimeout(task));
    }
}
exports.default = EnkaClient;
