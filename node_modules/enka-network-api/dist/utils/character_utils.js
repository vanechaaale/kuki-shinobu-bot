"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNameIdByCharacterId = exports.isReleased = exports.hasEnergySkill = exports.getCharactersById = void 0;
const CharacterData_1 = __importDefault(require("../models/character/CharacterData"));
/**
 * @param id
 * @param enka
 */
function getCharactersById(id, enka) {
    var _a;
    const data = (_a = enka.cachedAssetsManager.getGenshinCacheData("AvatarExcelConfigData").findArray((_, p) => p.getAsNumber("id") === id)) === null || _a === void 0 ? void 0 : _a[1];
    if (data.has("candSkillDepotIds") && (data.get("candSkillDepotIds").mapArray((_, p) => p.getAsNumber())).length > 0) {
        return data.get("candSkillDepotIds").filterArray((_, skillDepotId) => hasEnergySkill(skillDepotId.getAsNumber(), enka)).map(([, skillDepotId]) => new CharacterData_1.default(data.getAsJsonObject(), enka, skillDepotId.getAsNumber()));
    }
    else {
        if (!hasEnergySkill(data.getAsNumber("skillDepotId"), enka))
            return [];
        return [new CharacterData_1.default(data.getAsJsonObject(), enka)];
    }
}
exports.getCharactersById = getCharactersById;
/**
 * @param skillDepotId
 * @param enka
 */
function hasEnergySkill(skillDepotId, enka) {
    var _a;
    const data = (_a = enka.cachedAssetsManager.getGenshinCacheData("AvatarSkillDepotExcelConfigData").findArray((_, p) => p.getAsNumber("id") === skillDepotId)) === null || _a === void 0 ? void 0 : _a[1];
    return data.has("energySkill");
}
exports.hasEnergySkill = hasEnergySkill;
/**
 * @param characterId
 * @param enka
 */
function isReleased(characterId, enka) {
    const releaseData = enka.cachedAssetsManager.getGenshinCacheData("AvatarCodexExcelConfigData").findArray((_, p) => p.getAsNumber("avatarId") === characterId);
    return releaseData !== undefined || enka.cachedAssetsManager.getGenshinCacheData("AvatarHeroEntityExcelConfigData").mapArray((_, p) => p.getAsNumber("avatarId")).includes(characterId);
}
exports.isReleased = isReleased;
/**
 * @param characterId
 * @param enka
 */
function getNameIdByCharacterId(characterId, enka) {
    var _a;
    const data = (_a = enka.cachedAssetsManager.getGenshinCacheData("AvatarExcelConfigData").findArray((_, p) => p.getAsNumber("id") === characterId)) === null || _a === void 0 ? void 0 : _a[1];
    return data.getAsString("iconName").slice("UI_AvatarIcon_".length);
}
exports.getNameIdByCharacterId = getNameIdByCharacterId;
