import { JsonElement } from "./json_utils";
import { JsonManager, PathResolver } from "./json_manager";
interface IConfigFile extends JsonManager {
    readonly filePath: string | null;
    readonly defaultConfig: JsonElement;
    get(...keys: (string | number)[]): ConfigPathResolver;
    map<T>(callback: (entry: ConfigPathResolver) => T): T[];
    find(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver | undefined;
    filter(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver[];
    forEach(callback: (entry: ConfigPathResolver) => void): void;
    saveSync(compact: boolean): ConfigFile;
    loadSync(): ConfigFile;
    save(compact: boolean): Promise<ConfigFile>;
    load(): Promise<ConfigFile>;
    resetData(): ConfigFile;
}
export declare class ConfigFile extends JsonManager implements IConfigFile {
    readonly filePath: string | null;
    readonly defaultConfig: JsonElement;
    constructor(filePath: string | null, defaultConfig: JsonElement, readonly?: boolean, fastMode?: boolean, route?: (string | number)[]);
    get(...keys: (string | number)[]): ConfigPathResolver;
    map<T>(callback: (entry: ConfigPathResolver) => T): T[];
    find(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver | undefined;
    filter(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver[];
    forEach(callback: (entry: ConfigPathResolver) => void): void;
    saveSync(compact?: boolean): this;
    loadSync(): this;
    save(compact?: boolean): Promise<this>;
    load(): Promise<this>;
    resetData(): this;
}
declare class ConfigPathResolver extends PathResolver implements IConfigFile {
    readonly configFile: ConfigFile;
    readonly filePath: string | null;
    readonly defaultConfig: JsonElement;
    constructor(configFile: ConfigFile, route: (string | number)[], currentData: JsonElement | undefined);
    get(...keys: (string | number)[]): ConfigPathResolver;
    map<T>(callback: (entry: ConfigPathResolver) => T): T[];
    find(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver | undefined;
    filter(predicate: (entry: ConfigPathResolver) => boolean): ConfigPathResolver[];
    forEach(callback: (entry: ConfigPathResolver) => void): void;
    saveSync(compact?: boolean): ConfigFile;
    loadSync(): ConfigFile;
    save(compact?: boolean): Promise<ConfigFile>;
    load(): Promise<ConfigFile>;
    resetData(): ConfigFile;
}
export {};
