import { JsonObject } from "./json_utils";
export type PureObject = {
    [key: string]: unknown;
};
export type IsPureObject<T> = T extends PureObject ? true : false;
export type Merged<T, U> = {
    [P in (keyof T | keyof U)]: P extends keyof U ? P extends keyof T ? IsPureObject<U[P]> extends true ? IsPureObject<T[P]> extends true ? Merged<T[P], U[P]> : U[P] : U[P] : U[P] : P extends keyof T ? T[P] : never;
};
/**
 * @param defaultOptions
 * @param options
 */
export declare function bindOptions<T extends PureObject, U extends PureObject>(defaultOptions: T, options: U): Merged<T, U>;
/**
 * @param obj
 */
export declare function isPureObject(obj: unknown): obj is PureObject;
/**
 * @param obj
 */
export declare function deepCopy<T>(obj: T): T;
/** Generates random uuid v4 */
export declare function generateUuid(): string;
/**
 * @param array
 * @param callback
 */
export declare function separateByValue<T>(array: T[], callback: (element: T) => string): {
    [s: string]: T[];
};
/**
 * @param obj
 * @param newKeys
 */
export declare function renameKeys(obj: JsonObject, newKeys: {
    [from: string]: string;
}): any;
/**
 * @param dirFrom
 * @param dirTo
 */
export declare function move(dirFrom: string, dirTo: string): void;
/**
 * @param fileFrom
 * @param fileTo
 */
export declare function moveFile(fileFrom: string, fileTo: string): void;
